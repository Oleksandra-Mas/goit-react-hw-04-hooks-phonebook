{"version":3,"sources":["components/ContactForm/ContactForm.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","helpers/LocalStorage.js","App.js","index.js"],"names":["FormWrapper","styled","form","ContactForm","onSubmit","useState","name","setName","number","setNumber","nameId","shortid","generate","numberId","handleInputChange","event","target","value","Error","reset","preventDefault","Form","Label","htmlFor","Control","type","pattern","title","required","onChange","id","Button","variant","Item","li","ContactListItem","contact","onDelete","href","onClick","List","ul","ContactList","contacts","map","label","Filter","filter","filterId","placeholder","apiLS","addToList","list","localStorage","getItem","setItem","JSON","stringify","getFromList","parse","App","setContacts","setFilter","firstRender","useRef","useEffect","current","checkUniqueName","findIndex","toLowerCase","filteredContacts","includes","className","data","prevCont","toast","length","prevContacts","Alert","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gXAMMA,EAAcC,IAAOC,KAAV,8KASF,SAASC,EAAT,GAAoC,IAAbC,EAAY,EAAZA,SAClC,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEMC,EAASC,IAAQC,WACjBC,EAAWF,IAAQC,WACnBE,EAAoB,SAAAC,GACtB,MAAwBA,EAAMC,OAAtBC,EAAR,EAAQA,MAAOX,EAAf,EAAeA,KACf,OAAQA,GACJ,IAAK,OACDC,EAAQU,GACR,MACJ,IAAK,SACDR,EAAUQ,GACV,MACJ,QACI,MAAM,IAAIC,MAAJ,wBAA2BZ,MASvCa,EAAQ,WACVZ,EAAQ,IACRE,EAAU,KAEd,OACI,eAACT,EAAD,CAAaI,SAXI,SAAAW,GACjBA,EAAMK,iBACNhB,EAAS,CAAEE,OAAME,WACjBW,KAQA,UACI,eAACE,EAAA,EAAKC,MAAN,CAAYC,QAASb,EAArB,iBAEI,cAACW,EAAA,EAAKG,QAAN,CACIC,KAAK,OACLnB,KAAK,OACLoB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRX,MAAOX,EACPuB,SAAUf,EACVgB,GAAIpB,OAGZ,eAACW,EAAA,EAAKC,MAAN,CAAYC,QAASV,EAArB,mBAEI,cAACQ,EAAA,EAAKG,QAAN,CACIC,KAAK,MACLnB,KAAK,SACLoB,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,EACRX,MAAOT,EACPqB,SAAUf,EACVgB,GAAIjB,OAGZ,cAACkB,EAAA,EAAD,CAAQC,QAAQ,eAAeP,KAAK,SAApC,4BCnEZ,I,EAAMQ,EAAOhC,IAAOiC,GAAV,yEAKK,SAASC,EAAT,GAAiD,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SAC/C,OACI,eAACJ,EAAD,WACI,4BAAIG,EAAQ9B,OACZ,mBAAGgC,KAAM,OAASF,EAAQ5B,OAA1B,SAAmC4B,EAAQ5B,SAC3C,cAACuB,EAAA,EAAD,CACIC,QAAQ,eACRP,KAAK,SACLc,QAAS,WACLF,EAASD,EAAQN,KAJzB,uBCXZ,I,EAAMU,EAAOvC,IAAOwC,GAAV,mDAIK,SAASC,EAAT,GAA8C,IAAvBC,EAAsB,EAAtBA,SAAUN,EAAY,EAAZA,SAC5C,OACI,cAACG,EAAD,UACKG,EAASC,KAAI,SAAAR,GAAO,OACjB,cAACD,EAAD,CAEIC,QAASA,EACTC,SAAUA,GAFLD,EAAQN,SCPjC,IAAMR,EAAQrB,IAAO4C,MAAV,2IAQI,SAASC,EAAT,GAA8C,IAA5BC,EAA2B,EAA3BA,OAAQpB,EAAmB,EAAnBA,MAAOE,EAAY,EAAZA,SAMtCmB,EAAWrC,IAAQC,WACzB,OACI,eAACU,EAAD,CAAOC,QAASyB,EAAhB,UACI,+BAAOrB,IACP,cAACN,EAAA,EAAKG,QAAN,CACIC,KAAK,OACLnB,KAAK,SACLsB,UAAQ,EACRX,MAAO8B,EACPlB,SAde,SAAAd,GACvB,IAAQE,EAAUF,EAAMC,OAAhBC,MACRY,EAASZ,IAaDgC,YAAY,YACZnB,GAAIkB,OC/BpB,IAWeE,EADD,CAAEC,UAVE,SAAUlC,GAC1B,IAAImC,EAAOC,aAAaC,QAAQ,YAC3BF,IAAMA,EAAO,IAClBC,aAAaE,QAAQ,WAAYC,KAAKC,UAAUxC,KAOvByC,YAJP,WAClB,IAAMN,EAAOI,KAAKG,MAAMN,aAAaC,QAAQ,aAC7C,OAAOF,GAAc,KCKR,SAASQ,IACpB,MAAgCvD,mBAAS,IAAzC,mBAAOsC,EAAP,KAAiBkB,EAAjB,KACA,EAA4BxD,mBAAS,IAArC,mBAAO0C,EAAP,KAAee,EAAf,KACMC,EAAcC,kBAAO,GAE3BC,qBAAU,WACN,GAAIF,EAAYG,QAAS,CACrB,IAAMvB,EAAWO,EAAMQ,cAGvB,OAFAG,EAAYlB,QACZoB,EAAYG,SAAU,GAG1BhB,EAAMC,UAAUR,KACjB,CAACA,IAEJ,IAmBMwB,EAAkB,SAAA7D,GACpB,OAAOqC,EAASyB,WACZ,SAAAhC,GAAO,OAAIA,EAAQ9B,KAAK+D,gBAAkB/D,EAAK+D,kBAUjDC,EALK3B,EAASI,QAAO,SAAAX,GAAO,OAC1BA,EAAQ9B,KAAK+D,cAAcE,SAASxB,MAM5C,OACI,sBAAKyB,UAAU,MAAf,UACI,2CACA,cAACrE,EAAD,CAAaC,SApCF,SAAAqE,IACiB,IAAhCN,EAAgBM,EAAKnE,MACfuD,GAAY,SAAAa,GAAQ,4BACbA,GADa,cAEd5C,GAAInB,IAAQC,YAAe6D,QAEjCE,YAAM,GAAD,OAAIF,EAAKnE,KAAT,+BA+BP,0CACA,cAACwC,EAAD,CACInB,MAAO,wBACPoB,OAAQA,EACRlB,SA1BS,SAAA4C,GACjBX,EAAUW,EAAKJ,kBA2BVC,EAAiBM,OACd,cAAClC,EAAD,CACIC,SAAU2B,EACVjC,SArCM,SAAAP,GAClB+B,GAAY,SAAAgB,GAAY,OACpB,YAAIA,GAAc9B,QAAO,SAAAX,GAAO,OAAIA,EAAQN,KAAOA,WAsC/C,cAACgD,EAAA,EAAD,CAAON,UAAU,QAAQxC,QAAQ,OAAjC,2BAIJ,cAAC,IAAD,OC5EZ+C,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.6523c6e6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport shortid from 'shortid';\nimport { Button, Form } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst FormWrapper = styled.form`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    max-width: 400px;\n    width: 100%;\n    margin: 0 auto 20px;\n`;\n\nexport default function ContactForm({ onSubmit }) {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const nameId = shortid.generate();\n    const numberId = shortid.generate();\n    const handleInputChange = event => {\n        const { value, name } = event.target;\n        switch (name) {\n            case 'name':\n                setName(value);\n                break;\n            case 'number':\n                setNumber(value);\n                break;\n            default:\n                throw new Error(`Unknown input ${name}`);\n        }\n    };\n    const handleSubmit = event => {\n        event.preventDefault();\n        onSubmit({ name, number });\n        reset();\n    };\n\n    const reset = () => {\n        setName('');\n        setNumber('');\n    };\n    return (\n        <FormWrapper onSubmit={handleSubmit}>\n            <Form.Label htmlFor={nameId}>\n                Name\n                <Form.Control\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                    value={name}\n                    onChange={handleInputChange}\n                    id={nameId}\n                />\n            </Form.Label>\n            <Form.Label htmlFor={numberId}>\n                Number\n                <Form.Control\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                    value={number}\n                    onChange={handleInputChange}\n                    id={numberId}\n                />\n            </Form.Label>\n            <Button variant=\"outline-dark\" type=\"sumbit\">\n                Add contact\n            </Button>\n        </FormWrapper>\n    );\n}\nContactForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport styled from 'styled-components';\n\nconst Item = styled.li`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport default function ContactListItem({ contact, onDelete }) {\n    return (\n        <Item>\n            <p>{contact.name}</p>\n            <a href={'tel:' + contact.number}>{contact.number}</a>\n            <Button\n                variant=\"outline-dark\"\n                type=\"button\"\n                onClick={() => {\n                    onDelete(contact.id);\n                }}\n            >\n                Delete\n            </Button>\n        </Item>\n    );\n}\nContactListItem.propTypes = {\n    contact: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n    }).isRequired,\n    onDelete: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport ContactListItem from '../ContactListItem/';\nimport styled from 'styled-components';\n\nconst List = styled.ul`\n    margin-top: 20px;\n`;\n\nexport default function ContactList({ contacts, onDelete }) {\n    return (\n        <List>\n            {contacts.map(contact => (\n                <ContactListItem\n                    key={contact.id}\n                    contact={contact}\n                    onDelete={onDelete}\n                />\n            ))}\n        </List>\n    );\n}\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            number: PropTypes.string.isRequired,\n        }).isRequired,\n    ).isRequired,\n    onDelete: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport styled from 'styled-components';\nimport { Form } from 'react-bootstrap';\n\nconst Label = styled.label`\n    display: flex;\n    flex-direction: column;\n    max-width: 400px;\n    width: 100%;\n    margin: 0 auto;\n`;\n\nexport default function Filter({ filter, title, onChange }) {\n    const handleFilterChange = event => {\n        const { value } = event.target;\n        onChange(value);\n    };\n\n    const filterId = shortid.generate();\n    return (\n        <Label htmlFor={filterId}>\n            <span>{title}</span>\n            <Form.Control\n                type=\"text\"\n                name=\"filter\"\n                required\n                value={filter}\n                onChange={handleFilterChange}\n                placeholder=\"Search...\"\n                id={filterId}\n            />\n        </Label>\n    );\n}\nFilter.propTypes = {\n    filter: PropTypes.string.isRequired,\n    title: PropTypes.string,\n    onChange: PropTypes.func.isRequired,\n};\n","const addToList = function (value) {\r\n  let list = localStorage.getItem(\"contacts\");\r\n  if (!list) list = [];\r\n  localStorage.setItem(\"contacts\", JSON.stringify(value));\r\n};\r\n\r\nconst getFromList = function () {\r\n  const list = JSON.parse(localStorage.getItem(\"contacts\"));\r\n  return list ? list : [];\r\n};\r\nconst apiLS = { addToList, getFromList };\r\nexport default apiLS;\r\n","import { useEffect, useRef, useState } from 'react';\r\nimport shortid from 'shortid';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport './App.css';\r\nimport ContactForm from './components/ContactForm';\r\nimport ContactList from './components/ContactList';\r\nimport Filter from './components/Filter/';\r\nimport apiLS from './helpers/LocalStorage';\r\n\r\nexport default function App() {\r\n    const [contacts, setContacts] = useState([]);\r\n    const [filter, setFilter] = useState('');\r\n    const firstRender = useRef(true);\r\n\r\n    useEffect(() => {\r\n        if (firstRender.current) {\r\n            const contacts = apiLS.getFromList();\r\n            setContacts(contacts);\r\n            firstRender.current = false;\r\n            return;\r\n        }\r\n        apiLS.addToList(contacts);\r\n    }, [contacts]);\r\n\r\n    const addContact = data => {\r\n        checkUniqueName(data.name) === -1\r\n            ? setContacts(prevCont => [\r\n                  ...prevCont,\r\n                  { id: shortid.generate(), ...data },\r\n              ])\r\n            : toast(`${data.name} is already in contacts`);\r\n    };\r\n\r\n    const deleteContact = id => {\r\n        setContacts(prevContacts =>\r\n            [...prevContacts].filter(contact => contact.id !== id),\r\n        );\r\n    };\r\n\r\n    const changeFilter = data => {\r\n        setFilter(data.toLowerCase());\r\n    };\r\n\r\n    const checkUniqueName = name => {\r\n        return contacts.findIndex(\r\n            contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n        );\r\n    };\r\n\r\n    const getFilteredContacts = () => {\r\n        return contacts.filter(contact =>\r\n            contact.name.toLowerCase().includes(filter),\r\n        );\r\n    };\r\n\r\n    const filteredContacts = getFilteredContacts();\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>Phonebook</h1>\r\n            <ContactForm onSubmit={addContact} />\r\n            <h2>Contacts</h2>\r\n            <Filter\r\n                title={'Find contacts by name'}\r\n                filter={filter}\r\n                onChange={changeFilter}\r\n            />\r\n            {filteredContacts.length ? (\r\n                <ContactList\r\n                    contacts={filteredContacts}\r\n                    onDelete={deleteContact}\r\n                />\r\n            ) : (\r\n                <Alert className=\"Alert\" variant=\"dark\">\r\n                    Nothing found\r\n                </Alert>\r\n            )}\r\n            <ToastContainer />\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}