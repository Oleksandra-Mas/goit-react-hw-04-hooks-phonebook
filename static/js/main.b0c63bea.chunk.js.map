{"version":3,"sources":["components/ContactForm/ContactForm.module.scss","components/ContactList/ContactList.module.scss","components/ContactListItem/ContactListItem.module.scss","components/Filter/Filter.module.scss","components/ContactForm/ContactForm.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","helpers/LocalStorage.js","App.js","index.js"],"names":["module","exports","ContactForm","onSubmit","useState","name","setName","number","setNumber","nameId","shortid","generate","numberId","handleInputChange","event","target","value","Error","reset","Form","className","styles","form","preventDefault","Label","htmlFor","Control","type","pattern","title","required","onChange","id","Button","variant","ContactListItem","contact","onDelete","item","href","onClick","ContactList","contacts","contact_list","map","Filter","handleFilterChange","props","filterId","this","filter","label","placeholder","Component","apiLS","addToList","list","localStorage","getItem","setItem","JSON","stringify","getFromList","parse","App","setContacts","setFilter","firstRender","useRef","useEffect","current","checkUniqueName","findIndex","filteredContacts","toLowerCase","includes","data","prevCont","alert","length","prevContacts","Alert","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0c63bea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__d8nV1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_list\":\"ContactList_contact_list__1jdmi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactListItem_item__3Q1v_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__3Dnwu\"};","import React, { useState } from 'react';\nimport shortid from 'shortid';\nimport { Button, Form } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nimport styles from './ContactForm.module.scss';\n\nexport default function ContactForm({ onSubmit }) {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const nameId = shortid.generate();\n    const numberId = shortid.generate();\n    const handleInputChange = event => {\n        const { value, name } = event.target;\n        switch (name) {\n            case 'name':\n                setName(value);\n                break;\n            case 'number':\n                setNumber(value);\n                break;\n            default:\n                throw new Error(`Unknown input ${name}`);\n        }\n    };\n    const handleSubmit = event => {\n        event.preventDefault();\n        onSubmit({ name, number });\n        reset();\n    };\n\n    const reset = () => {\n        setName('');\n        setNumber('');\n    };\n    return (\n        <Form className={styles.form} onSubmit={handleSubmit}>\n            <Form.Label htmlFor={nameId}>\n                Name\n                <Form.Control\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                    value={name}\n                    onChange={handleInputChange}\n                    id={nameId}\n                />\n            </Form.Label>\n            <Form.Label htmlFor={numberId}>\n                Number\n                <Form.Control\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                    value={number}\n                    onChange={handleInputChange}\n                    id={numberId}\n                />\n            </Form.Label>\n            <Button variant=\"outline-dark\" type=\"sumbit\">\n                Add contact\n            </Button>\n        </Form>\n    );\n}\nContactForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport styles from './ContactListItem.module.scss';\nexport default function ContactListItem({ contact, onDelete }) {\n    return (\n        <li className={styles.item}>\n            <p>{contact.name}</p>\n            <a href={'tel:' + contact.number}>{contact.number}</a>\n            <Button\n                variant=\"outline-dark\"\n                type=\"button\"\n                onClick={() => {\n                    onDelete(contact.id);\n                }}\n            >\n                Delete\n            </Button>\n        </li>\n    );\n}\nContactListItem.propTypes = {\n    contact: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n    }).isRequired,\n    onDelete: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport styles from './ContactList.module.scss';\nimport ContactListItem from '../ContactListItem/';\n\nexport default function ContactList({ contacts, onDelete }) {\n    return (\n        <ul className={styles.contact_list}>\n            {contacts.map(contact => (\n                <ContactListItem\n                    key={contact.id}\n                    contact={contact}\n                    onDelete={onDelete}\n                />\n            ))}\n        </ul>\n    );\n}\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            number: PropTypes.string.isRequired,\n        }).isRequired,\n    ).isRequired,\n    onDelete: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport { Form } from 'react-bootstrap';\n\nimport styles from './Filter.module.scss';\n\nclass Filter extends Component {\n    static propTypes = {\n        filter: PropTypes.string.isRequired,\n        title: PropTypes.string,\n        onChange: PropTypes.func.isRequired,\n    };\n    handleFilterChange = event => {\n        const { value } = event.target;\n        this.props.onChange(value);\n    };\n    filterId = shortid.generate();\n    render() {\n        const { filter, title } = this.props;\n        return (\n            <label className={styles.label} htmlFor={this.filterId}>\n                <span>{title}</span>\n                <Form.Control\n                    type=\"text\"\n                    name=\"filter\"\n                    required\n                    value={filter}\n                    onChange={this.handleFilterChange}\n                    placeholder=\"Search...\"\n                    id={this.filterId}\n                />\n            </label>\n        );\n    }\n}\nexport default Filter;\n","const addToList = function (value) {\r\n  let list = localStorage.getItem(\"contacts\");\r\n  if (!list) list = [];\r\n  localStorage.setItem(\"contacts\", JSON.stringify(value));\r\n};\r\n\r\nconst getFromList = function () {\r\n  const list = JSON.parse(localStorage.getItem(\"contacts\"));\r\n  return list ? list : [];\r\n};\r\nconst apiLS = { addToList, getFromList };\r\nexport default apiLS;\r\n","import { useEffect, useRef, useState } from 'react';\r\nimport shortid from 'shortid';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nimport './App.css';\r\nimport ContactForm from './components/ContactForm';\r\nimport ContactList from './components/ContactList';\r\nimport Filter from './components/Filter/';\r\nimport apiLS from './helpers/LocalStorage';\r\n\r\nexport default function App() {\r\n    const [contacts, setContacts] = useState([]);\r\n    const [filter, setFilter] = useState('');\r\n    const firstRender = useRef(true);\r\n\r\n    useEffect(() => {\r\n        if (firstRender.current) {\r\n            const contacts = apiLS.getFromList();\r\n            setContacts(contacts);\r\n            firstRender.current = false;\r\n            return;\r\n        }\r\n        apiLS.addToList(contacts);\r\n    }, [contacts]);\r\n\r\n    const addContact = data => {\r\n        checkUniqueName(data.name) === -1\r\n            ? setContacts(prevCont => [\r\n                  ...prevCont,\r\n                  { id: shortid.generate(), ...data },\r\n              ])\r\n            : alert(`${data.name} is already in contacts`);\r\n    };\r\n\r\n    const deleteContact = id => {\r\n        setContacts(prevContacts =>\r\n            [...prevContacts].filter(contact => contact.id !== id),\r\n        );\r\n    };\r\n\r\n    const changeFilter = data => {\r\n        setFilter(data.toLowerCase());\r\n    };\r\n\r\n    const checkUniqueName = name => {\r\n        return contacts.findIndex(contact => contact.name === name);\r\n    };\r\n\r\n    const getFilteredContacts = () => {\r\n        return contacts.filter(contact =>\r\n            contact.name.toLowerCase().includes(filter),\r\n        );\r\n    };\r\n\r\n    const filteredContacts = getFilteredContacts();\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>Phonebook</h1>\r\n            <ContactForm onSubmit={addContact} />\r\n            <h2>Contacts</h2>\r\n            <Filter\r\n                title={'Find contacts by name'}\r\n                filter={filter}\r\n                onChange={changeFilter}\r\n            />\r\n            {filteredContacts.length ? (\r\n                <ContactList\r\n                    contacts={filteredContacts}\r\n                    onDelete={deleteContact}\r\n                />\r\n            ) : (\r\n                <Alert className=\"Alert\" variant=\"dark\">\r\n                    Nothing found\r\n                </Alert>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}